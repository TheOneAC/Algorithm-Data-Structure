/* the same method with 3sum but not the way to duplicate removal
 * violent traverse but use set to detect duplication.
 * this function will AC on leetcode whether the pruning is existed or not.
 */
class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
      sort(nums.begin(),nums.end());
      vector<vector<int> > result;
      set<vector<int> >s;
      for(int i=0;i<nums.size();i++)
      {
          //if(i>0&&nums[i]==nums[i-1])continue;
          for(int j=i+1;j<nums.size();j++)
          {
              //if(j>0&&nums[j]==nums[j-1])continue;
              for(int m=j+1,n=nums.size()-1;m<n;)
              {
                  int tmp_sum=nums[i]+nums[j]+nums[m]+nums[n];
                  if(tmp_sum==target)
                  {
                     if(s.find(vector<int>({nums[i],nums[j],nums[m],nums[n]}))==s.end())
                     {
                         s.insert(vector<int>({nums[i],nums[j],nums[m],nums[n]}));
                         result.push_back(vector<int>({nums[i],nums[j],nums[m],nums[n]}));
                     }
                     while(m+1<nums.size()-1&&nums[m]==nums[m+1])m++;   // pruning
                     m++;
                  }
                  else if(tmp_sum<target)m++;
                  else n--;
              }
          }
      }
      s.clear();
      return result;
    }
};
