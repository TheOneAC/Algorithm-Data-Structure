/* before op.top() must detect whether the op is empty or not.
 */
class Solution {
public:
    bool isValid(string s) {
        stack<char>op;
        for(int i=0;i<s.size();i++)
        {
            switch (s[i])
            {
                case '(':
                case '{':
                case '[':{op.push(s[i]);break;}
                case ')':{
                    if(!op.empty()&&op.top()=='('){op.pop();break;}
                    else return false;
                }
                case '}':{
                    if(!op.empty()&&op.top()=='{'){op.pop();break;}
                    else return false;
                }
                case ']':{
                    if(!op.empty()&&op.top()=='['){op.pop();break;}
                    else return false;
                }
                default: ;
            }
        }
        return op.empty();
    }
};

class Solution {
public:
    bool isValid(string s) {
        stack<char> op;
        for (char& c : s) {
            switch (c) {
                case '(': 
                case '{': 
                case '[': op.push(c); break;
                case ')': if (op.empty() || op.top()!='(') return false; else op.pop(); break;
                case '}': if (op.empty() || op.top()!='{') return false; else op.pop(); break;
                case ']': if (op.empty() || op.top()!='[') return false; else op.pop(); break;
                default: ; // pass
            }
        }
        return op.empty() ;
    }
};
