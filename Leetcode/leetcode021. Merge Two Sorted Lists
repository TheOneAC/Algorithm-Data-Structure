/**
 * the list is ascend defaultly.
 */

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        if(l1==NULL)return l2;     //deal with empty list
        else if(l2==NULL)return l1;
        ListNode* newhead,*tail;
        if(l1->val<l2->val){ tail=newhead=l1;l1=l1->next; }  // determine which is the head to return.
        else { tail=newhead=l2;l2=l2->next; }
        while(l1!=NULL&&l2!=NULL)                            //merge sorted list
        {
             if(l1->val<l2->val){ tail->next=l1;tail=tail->next;l1=l1->next; }
             else { tail->next=l2;tail=tail->next;l2=l2->next; }
        }
        tail->next=l1!=NULL?l1:l2;                           //merge the remain list
        return newhead;
    }
};
