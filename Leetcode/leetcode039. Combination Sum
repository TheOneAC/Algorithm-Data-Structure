/*
 * more like a bfs
 * backtrack
 */ 
class Solution {
public:
    
    void backtrack(vector<int>& candidates,vector<vector<int>>&re, vector<int>path, int start, int cur){
        if(cur == 0){re.push_back(path);return;}
        for( int i = start ; i< candidates.size(); i++){
            if(cur < candidates[i] )continue;
            path.push_back(candidates[i]);
            backtrack(candidates,re,path,i,cur - candidates[i]);
            path.pop_back();
        }
    }
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        vector<vector<int>>re;
        vector<int> path;
        backtrack(candidates,re,path,0,target);
        return re;
    }
};