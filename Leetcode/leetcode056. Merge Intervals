/*
 * sort by node.start
 * then compare node[i].end`s relation with node[i+1].start and node[i+1].end;
 */
/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
class Solution {
    
public:
    struct com{
        bool operator()(struct Interval a, struct Interval b){
            return a.start < b.start;
        }
    }comp;
    vector<Interval> merge(vector<Interval>& intervals) {
        if(intervals.size() == 0)return intervals;
        sort(intervals.begin(), intervals.end(), comp);
        for( int i =0; i< intervals.size()-1;){
            if(intervals[i].end < intervals[i+1].start)i++;
            else{
                if(intervals[i].end <= intervals[i+1].end)
                    intervals[i].end = intervals[i+1].end;
                intervals.erase(intervals.begin()+i+1);
            }
        }
        return intervals;
    }
};