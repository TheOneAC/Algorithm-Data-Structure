/**
 * traverse k elements
 * recursive do the n-k elements
 * reverse the k elements
 */

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* reverseKGroup(ListNode* head, int k) {
        if(k == 1 || head == nullptr)  return head;
        ListNode *tail = head;
        int i;
        for(i=0;i<k && tail != nullptr;i++,tail=tail->next);  //traverse to k element
        if(i<k) return head;				// if it arrives at end, done.
	    tail = reverseKGroup(tail, k);        // deal with the remian n-k elements
        ListNode* rear = head,*tmp=nullptr;
	    head= tail;				//link the current k with the remain
        for(int i = 0;i<k;i++){			// reverse k elements.
        	  tmp = rear->next;		
        	  rear->next = head;
        	  head = rear;
        	  rear = tmp;
    	}
        return head;
    }
};
